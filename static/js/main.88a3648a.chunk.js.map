{"version":3,"sources":["ToDoLists.jsx","App.jsx","Cards.jsx","componuts/List.jsx","serviceWorker.js","componuts/About.jsx","componuts/Contact.jsx","Simple.jsx","index.js"],"names":["ToDoLists","props","className","aria-hidden","onClick","onSelect","id","text","App","useState","inputList","setInputList","Items","setItems","deleteItems","console","log","oldItems","filter","arrElem","index","type","placeholder","onChange","event","target","value","map","itemval","key","Card","List","num","setNum","Boolean","window","location","hostname","match","About","Contact","Simple","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4OAceA,EAbG,SAACC,GAGf,OACA,oCACA,yBAAKC,UAAU,cACX,uBAAGA,UAAU,cAAcC,cAAY,OAAOC,QAAS,WAAOH,EAAMI,SAASJ,EAAMK,QAEvF,4BAAKL,EAAMM,QCgDAC,EApDH,WAAO,IAAD,EAEoBC,mBAAS,IAF7B,mBAEPC,EAFO,KAEIC,EAFJ,OAGYF,mBAAS,IAHrB,mBAGPG,EAHO,KAGAC,EAHA,KAiBRC,EAAc,SAACR,GACjBS,QAAQC,IAAI,eAClBH,GAAS,SAACI,GACN,OAAOA,EAASC,QAAO,SAACC,EAASC,GAC7B,OAAOA,IAAUd,SAMvB,OACI,oCACA,yBAAKJ,UAAU,YACX,yBAAKA,UAAU,cACX,6BACA,0CACA,6BACA,2BAAOmB,KAAK,OAAOC,YAAY,WAAWC,SA5BpC,SAACC,GACfb,EAAaa,EAAMC,OAAOC,QA2B6CA,MAAOhB,IACtE,4BAAQN,QAzBA,WAChBS,GAAS,SAACI,GACN,MAAM,GAAN,mBAAWA,GAAX,CAAoBP,OAExBC,EAAa,MAqBL,OACA,4BACCC,EAAMe,KAAI,SAACC,EAAQR,GACrB,OAAQ,kBAAC,EAAD,CAAWS,IAAKT,EAAOd,GAAIc,EAC7Bb,KAAMqB,EACNvB,SAAUS,YCvBdgB,ICYFC,EA/BF,WAAO,IAAD,EAEQtB,mBAAS,GAFjB,mBAEPuB,EAFO,KAEFC,EAFE,KAef,OACI,oCACA,yBAAK/B,UAAU,YACX,yBAAKA,UAAU,QACX,4BAAK8B,GACL,yBAAK9B,UAAU,WACf,4BAAQE,QAjBL,WACX6B,EAAOD,EAAM,KAgBL,OACA,4BAAQ5B,QAdL,WAEX6B,EADGD,EAAM,EACFA,EAAM,EAEN,KAUC,Y,sBCbIE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCVSC,EAND,WAEV,OAAO,qDCEIC,EAJC,WACZ,OAAO,2DCuBIC,EAjBA,WACX,OACI,oCACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWL,IACjC,kBAAC,IAAD,CAAOI,KAAK,WAAWC,UAAWJ,IAClC,kBAAC,IAAD,CAAOG,KAAK,OAAOC,UAAWpC,IAC9B,kBAAC,IAAD,CAAOmC,KAAK,QAAQC,UAAWb,OCJ3Cc,IAASC,OACN,kBAAC,IAAD,KACD,kBAAC,EAAD,OAECC,SAASC,eAAe,SJmHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.88a3648a.chunk.js","sourcesContent":["import React from 'react';\r\nconst ToDoLists = (props) => {\r\n\r\n   \r\n    return (\r\n    <>\r\n    <div className=\"todo_style\">\r\n        <i className=\"fa fa-times\" aria-hidden=\"true\" onClick={() => {props.onSelect(props.id)}}></i>\r\n    </div>\r\n    <li>{props.text}</li>\r\n    </>\r\n    );\r\n};\r\n\r\nexport default ToDoLists;","import React, { useState } from 'react';\nimport ToDoLists from './ToDoLists';\n\n\n\nconst App = () => {\n\n    const [inputList, setInputList] = useState(\"\");\n    const [Items, setItems] = useState([]);\n\n\n    const itemEvent = (event) => {\n        setInputList(event.target.value);\n    };\n\n    const listOfItems = () => {\n        setItems((oldItems) => {\n            return [...oldItems,inputList];\n        });\n        setInputList(\"\");\n\n    };\n    const deleteItems = (id) => {\n        console.log(\"deleteItems\");\n  setItems((oldItems) => {\n      return oldItems.filter((arrElem, index) => {\n          return index !== id;\n\n      });\n  }); \n\n    }\n    return(\n        <>\n        <div className=\"main_div\">\n            <div className=\"center_div\">\n                <br/>\n                <h1>To DO LIST</h1>\n                <br/>\n                <input type=\"text\" placeholder=\"add item\" onChange={itemEvent} value={inputList}/>\n                <button onClick={listOfItems}> + </button>\n                <ol>\n              {  Items.map((itemval,index) => {\n               return  <ToDoLists key={index} id={index}\n                     text={itemval}\n                     onSelect={deleteItems}\n                 />\n\n                })}\n                </ol>\n            </div>\n        </div>\n\n        </>\n    );\n}\n\nexport default App;\n","import React from 'react';\r\n\r\nfunction Card(props){\r\n    return(\r\n      <>\r\n      <div className=\"cards\">\r\n        <div className=\"card\">\r\n          <img src={props.imgsrc} alt=\"mypic\" className=\"card_img\"/>\r\n          <div className=\"class_info\">\r\n           <span className=\"card_catag\">{props.title}</span>\r\n           <h3 className=\"card_tittle\">{props.sname}</h3>\r\n            <a href={props.link} target=\"_blank\">\r\n              <button>watch now</button>\r\n            </a>\r\n          </div>\r\n        </div>\r\n    \r\n      </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  export default Card;","import React, { useState } from 'react';\r\n\r\n\r\nconst List = () => {\r\n\r\n    const  [num, setNum] = useState(0);\r\n\r\n    const incNum = () => {\r\n        setNum(num + 1);\r\n    }\r\n\r\n    const decNum = () => {\r\n        if(num > 0){\r\n        setNum(num - 1);\r\n    }else{\r\n        setNum(0);\r\n    }\r\n    }\r\n    return(\r\n        <>\r\n        <div className=\"main_div\">\r\n            <div className=\"card\">\r\n                <h1>{num}</h1>\r\n                <div className=\"btn_div\">\r\n                <button onClick={incNum}>inc</button>\r\n                <button onClick={decNum}>dec</button>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n} ;\r\n\r\nexport default List;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst About = () => {\r\n\r\n    return(<h1>hello my name is jay</h1>) \r\n\r\n}\r\n\r\nexport default About;","import React from 'react';\r\n\r\nconst Contact = () => {\r\n    return(<h1>hello number is 7990675382</h1>) \r\n}\r\n\r\nexport default Contact;","import React from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport About from './componuts/About';\r\nimport Contact from './componuts/Contact';\r\nimport App from './App';\r\nimport List from './componuts/List';\r\n\r\n\r\n\r\nconst Simple = () => {\r\n    return(\r\n        <>\r\n        <Switch>\r\n            <Route exact path=\"/\" component={About}></Route>\r\n            <Route path=\"/Contact\" component={Contact}></Route>\r\n            <Route path=\"/App\" component={App}></Route>\r\n            <Route path=\"/List\" component={List}></Route>\r\n\r\n        </Switch>\r\n        {/* <About/>\r\n        <Contact/> */}\r\n        </>\r\n    );\r\n\r\n\r\n};\r\nexport default Simple;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Card from \"./Cards\";\nimport List from './componuts/List';\nimport \"./index.css\"\nimport \"./componuts/List.css\";\nimport {BrowserRouter} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Simple from './Simple';\n\n\nReactDOM.render(\n   <BrowserRouter>\n  <Simple/>\n</BrowserRouter> \n,  document.getElementById('root')\n    \n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}